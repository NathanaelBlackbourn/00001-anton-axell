/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SlaskBlock = {
  _type: "slaskBlock";
  head?: Array<{
    _key: string;
  } & SlaskImg>;
  body?: Array<{
    _key: string;
  } & SlaskImg>;
};

export type SlaskImg = {
  _type: "slaskImg";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  colStart?: number;
  colEnd?: number;
};

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  phone?: string;
  email?: string;
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  text?: string;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slask?: Array<{
    _key: string;
  } & SlaskBlock>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | SlaskBlock | SlaskImg | Contact | About | HomePage | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/queries/headerQuery.ts
// Variable: HEADER_QUERY
// Query: {    "about": *[_type == "about"][0]{        ...,        image {  crop,  hotspot,  "_ref": asset->_ref,  "altText": asset->altText,  "metadata": asset->metadata}    },    "contact": *[_type == "contact"][0]}
export type HEADER_QUERYResult = {
  about: {
    _id: string;
    _type: "about";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    image: {
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      _ref: null;
      altText: string | null;
      metadata: SanityImageMetadata | null;
    } | null;
    text?: string;
  } | null;
  contact: {
    _id: string;
    _type: "contact";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    phone?: string;
    email?: string;
  } | null;
};

// Source: ./src/sanity/queries/pages/homePageQuery.ts
// Variable: slaskImg
// Query: {    ...,    image {  crop,  hotspot,  "_ref": asset->_ref,  "altText": asset->altText,  "metadata": asset->metadata}}
export type SlaskImgResult = never;
// Variable: HOME_PAGE_QUERY
// Query: *[_type == "homePage"][0]{    slask[]{        body[]{    ...,    image {  crop,  hotspot,  "_ref": asset->_ref,  "altText": asset->altText,  "metadata": asset->metadata}},        head[]{    ...,    image {  crop,  hotspot,  "_ref": asset->_ref,  "altText": asset->altText,  "metadata": asset->metadata}}    }}
export type HOME_PAGE_QUERYResult = {
  slask: Array<{
    body: Array<{
      _key: string;
      _type: "slaskImg";
      image: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        _ref: null;
        altText: string | null;
        metadata: SanityImageMetadata | null;
      } | null;
      colStart?: number;
      colEnd?: number;
    }> | null;
    head: Array<{
      _key: string;
      _type: "slaskImg";
      image: {
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        _ref: null;
        altText: string | null;
        metadata: SanityImageMetadata | null;
      } | null;
      colStart?: number;
      colEnd?: number;
    }> | null;
  }> | null;
} | null;

// Source: ./src/sanity/queries/fragments/imageFragment.ts
// Variable: IMAGE_FRAGMENT
// Query: {  crop,  hotspot,  "_ref": asset->_ref,  "altText": asset->altText,  "metadata": asset->metadata}
export type IMAGE_FRAGMENTResult = {
  crop: never;
  hotspot: never;
  _ref: never;
  altText: never;
  metadata: never;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "{\n    \"about\": *[_type == \"about\"][0]{\n        ...,\n        image {\n  crop,\n  hotspot,\n  \"_ref\": asset->_ref,\n  \"altText\": asset->altText,\n  \"metadata\": asset->metadata\n}\n    },\n    \"contact\": *[_type == \"contact\"][0]\n}": HEADER_QUERYResult;
    "{\n    ...,\n    image {\n  crop,\n  hotspot,\n  \"_ref\": asset->_ref,\n  \"altText\": asset->altText,\n  \"metadata\": asset->metadata\n}\n}": SlaskImgResult;
    "*[_type == \"homePage\"][0]{\n    slask[]{\n        body[]{\n    ...,\n    image {\n  crop,\n  hotspot,\n  \"_ref\": asset->_ref,\n  \"altText\": asset->altText,\n  \"metadata\": asset->metadata\n}\n},\n        head[]{\n    ...,\n    image {\n  crop,\n  hotspot,\n  \"_ref\": asset->_ref,\n  \"altText\": asset->altText,\n  \"metadata\": asset->metadata\n}\n}\n    }\n}": HOME_PAGE_QUERYResult;
    "{\n  crop,\n  hotspot,\n  \"_ref\": asset->_ref,\n  \"altText\": asset->altText,\n  \"metadata\": asset->metadata\n}": IMAGE_FRAGMENTResult;
  }
}
